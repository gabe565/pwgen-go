package main

import (
	"bufio"
	"bytes"
	"context"
	"errors"
	"fmt"
	"log/slog"
	"net/http"
	"strings"
	"time"

	"gabe565.com/pwgen/internal/wordlist"
	. "github.com/dave/jennifer/jen" //nolint:revive,staticcheck
)

func main() {
	ctx, cancel := context.WithTimeout(context.Background(), time.Minute)
	defer cancel()

	for _, meta := range wordlist.MetaValues() {
		if err := templateFile(ctx, meta); err != nil {
			panic(err)
		}
	}
}

var (
	errStatusCode = errors.New("invalid response")
	errNoWords    = errors.New("list did not contain any words")
)

func templateFile(ctx context.Context, meta wordlist.Meta) error {
	req, err := http.NewRequestWithContext(ctx, http.MethodGet, meta.URL(), nil)
	if err != nil {
		return err
	}

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return err
	}
	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("%w: %s", errStatusCode, resp.Status)
	}

	f := NewFile("wordlist")
	f.HeaderComment("// Code generated by internal/wordlist/generate; DO NOT EDIT.")

	f.Comment(meta.Var() + " " + meta.Description() + "\n\n" + "Source: https://www.eff.org/dice")
	scanner := bufio.NewScanner(resp.Body)
	var count int
	f.Func().Id(meta.Var()).Params().Id("Wordlist").Block(
		Return(
			Id("Wordlist").BlockFunc(func(group *Group) {
				for scanner.Scan() {
					word := scanner.Bytes()
					// Remove comments
					if word, _, _ = bytes.Cut(word, []byte("#")); len(word) != 0 {
						// Remove number prefix
						if _, word, _ = bytes.Cut(word, []byte("\t")); len(word) != 0 {
							count++
							group.Lit(string(word)).Op(",")
						}
					}
				}
			}),
		),
	)
	if scanner.Err() != nil {
		return scanner.Err()
	}
	if count == 0 {
		return errNoWords
	}

	if err := resp.Body.Close(); err != nil {
		return err
	}

	if err := f.Save(strings.ToLower(meta.Var()) + ".go"); err != nil {
		return err
	}

	slog.Info("Generated wordlist", "name", meta.String(), "var", meta.Var(), "count", count, "url", meta.URL())
	return nil
}
