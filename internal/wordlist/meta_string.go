// Code generated by "enumer -type Meta -transform lower -text -output meta_string.go"; DO NOT EDIT.

package wordlist

import (
	"fmt"
	"strings"
)

const _MetaName = "longshort1short2"

var _MetaIndex = [...]uint8{0, 4, 10, 16}

const _MetaLowerName = "longshort1short2"

func (i Meta) String() string {
	if i >= Meta(len(_MetaIndex)-1) {
		return fmt.Sprintf("Meta(%d)", i)
	}
	return _MetaName[_MetaIndex[i]:_MetaIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MetaNoOp() {
	var x [1]struct{}
	_ = x[Long-(0)]
	_ = x[Short1-(1)]
	_ = x[Short2-(2)]
}

var _MetaValues = []Meta{Long, Short1, Short2}

var _MetaNameToValueMap = map[string]Meta{
	_MetaName[0:4]:        Long,
	_MetaLowerName[0:4]:   Long,
	_MetaName[4:10]:       Short1,
	_MetaLowerName[4:10]:  Short1,
	_MetaName[10:16]:      Short2,
	_MetaLowerName[10:16]: Short2,
}

var _MetaNames = []string{
	_MetaName[0:4],
	_MetaName[4:10],
	_MetaName[10:16],
}

// MetaString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MetaString(s string) (Meta, error) {
	if val, ok := _MetaNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MetaNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Meta values", s)
}

// MetaValues returns all values of the enum
func MetaValues() []Meta {
	return _MetaValues
}

// MetaStrings returns a slice of all String values of the enum
func MetaStrings() []string {
	strs := make([]string, len(_MetaNames))
	copy(strs, _MetaNames)
	return strs
}

// IsAMeta returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Meta) IsAMeta() bool {
	for _, v := range _MetaValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for Meta
func (i Meta) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Meta
func (i *Meta) UnmarshalText(text []byte) error {
	var err error
	*i, err = MetaString(string(text))
	return err
}
